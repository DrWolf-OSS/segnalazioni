package it.drwolf.alerting.entity;

// Generated 17-giu-2008 14.53.44 by Hibernate Tools 3.2.1.GA

import java.util.ArrayList;
import java.util.List;
import javax.persistence.Entity;
import javax.persistence.GeneratedValue;
import javax.persistence.GenerationType;
import javax.persistence.Id;
import javax.persistence.Lob;
import javax.persistence.Table;
import javax.persistence.Transient;

import org.hibernate.annotations.CollectionOfElements;
import org.hibernate.validator.Pattern;

/**
 * Cittadino generated by hbm2java
 */
@Entity
@Table(name = "Report")
public class Report {

	private Integer id;
	private String query;
	private boolean visible;
	private List<String> columns;
	private String nome;
	private String descrizione;
	
	

	public Report() {
		columns = new ArrayList<String>();
	}


	@Id
	@GeneratedValue(strategy = GenerationType.AUTO)
	public Integer getId() {
		return this.id;
	}



	public void setId(Integer id) {
		this.id = id;
	}

	@Lob
	@Pattern(flags=java.util.regex.Pattern.CASE_INSENSITIVE | java.util.regex.Pattern.DOTALL|java.util.regex.Pattern.MULTILINE, regex="^(SELECT|select).*(:inizio).*(:fine).*", message="La query deve iniziare con 'select' e contenere ':inizio' e ':fine'")
	public String getQuery() {
		return query;
	}


	public boolean isVisible() {
		return visible;
	}

	@CollectionOfElements
	public List<String> getColumns() {
		return columns;
	}


	public String getNome() {
		return nome;
	}


	@Lob
	public String getDescrizione() {
		return descrizione;
	}


	public void setQuery(String query) {
		this.query = query;
	}


	public void setVisible(boolean visible) {
		this.visible = visible;
	}


	public void setColumns(List<String> columns) {
		this.columns = columns;
	}


	public void setNome(String nome) {
		this.nome = nome;
	}


	public void setDescrizione(String descrizione) {
		this.descrizione = descrizione;
	}

	@Transient
	public String getColumnsAsString(){
		String stringa = new String();
		for (String column : this.getColumns()) {
			stringa += column + ", ";
  
		}
		if (stringa.length() > 1) {
			stringa = stringa.substring(0, stringa.length() - 2 );
		}		
		return stringa;
	}
}
