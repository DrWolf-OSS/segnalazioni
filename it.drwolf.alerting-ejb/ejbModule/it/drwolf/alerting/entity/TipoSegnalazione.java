package it.drwolf.alerting.entity;

// Generated 17-giu-2008 14.53.44 by Hibernate Tools 3.2.1.GA

import static javax.persistence.GenerationType.IDENTITY;

import java.util.ArrayList;
import java.util.HashSet;
import java.util.Iterator;
import java.util.List;
import java.util.Set;

import javax.persistence.CascadeType;
import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.FetchType;
import javax.persistence.GeneratedValue;
import javax.persistence.Id;
import javax.persistence.ManyToMany;
import javax.persistence.ManyToOne;
import javax.persistence.OneToMany;
import javax.persistence.OrderBy;
import javax.persistence.Table;
import javax.persistence.Transient;

/**
 * TipoSegnalazione generated by hbm2java
 */
@Entity
@Table(name = "TipoSegnalazione", catalog = "segnalazioni")
public class TipoSegnalazione implements java.io.Serializable {

	private static final long serialVersionUID = 1466468835023062092L;
	private Integer id;
	private String descrizione;

	private String smistatoreFinale;

	private Set<SottotipoSegnalazione> sottotipoSegnalaziones = new HashSet<SottotipoSegnalazione>(
			0);

	private List<Stato> statiPossibili = new ArrayList<Stato>(0);

	private UfficioCompetente ufficioSmistatore;

	private List<UfficioCompetente> ufficiCompetenti;

	public TipoSegnalazione() {
	}

	@Column(name = "Descrizione")
	public String getDescrizione() {
		return this.descrizione;
	}

	@Id
	@GeneratedValue(strategy = IDENTITY)
	@Column(name = "id", unique = true, nullable = false)
	public Integer getId() {
		return this.id;
	}

	public String getSmistatoreFinale() {
		return this.smistatoreFinale;
	}

	@OneToMany(cascade = CascadeType.ALL, fetch = FetchType.LAZY, mappedBy = "tipoSegnalazione")
	public Set<SottotipoSegnalazione> getSottotipoSegnalaziones() {
		return this.sottotipoSegnalaziones;
	}

	@Transient
	public List<Stato> getStati4Update() {
		List<Stato> s = new ArrayList<Stato>(this.getStatiPossibili());
		Iterator<Stato> i = s.iterator();
		while (i.hasNext()) {
			if ((i.next()).getNome().equals("chiuso")) {
				i.remove();
			}

		}
		return s;

	}

	@ManyToMany
	@OrderBy("descrizione")
	public List<Stato> getStatiPossibili() {
		return this.statiPossibili;
	}

	@ManyToMany
	public List<UfficioCompetente> getUfficiCompetenti() {
		return this.ufficiCompetenti;
	}

	@ManyToOne
	public UfficioCompetente getUfficioSmistatore() {
		return this.ufficioSmistatore;
	}

	public void setDescrizione(String descrizione) {
		this.descrizione = descrizione;
	}

	public void setId(Integer id) {
		this.id = id;
	}

	public void setSmistatoreFinale(String smistatoreFinale) {
		this.smistatoreFinale = smistatoreFinale;
	}

	public void setSottotipoSegnalaziones(
			Set<SottotipoSegnalazione> sottotipoSegnalaziones) {
		this.sottotipoSegnalaziones = sottotipoSegnalaziones;
	}

	public void setStatiPossibili(List<Stato> statiPossibili) {
		this.statiPossibili = statiPossibili;
	}

	public void setUfficiCompetenti(List<UfficioCompetente> uffici) {
		this.ufficiCompetenti = uffici;
	}

	public void setUfficioSmistatore(UfficioCompetente ufficioSmistatore) {
		this.ufficioSmistatore = ufficioSmistatore;
	}

	@Override
	public String toString() {
		return this.descrizione;
	}

}
