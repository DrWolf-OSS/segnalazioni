package it.drwolf.alerting.entity;

import static javax.persistence.GenerationType.IDENTITY;

import java.util.ArrayList;
import java.util.List;

import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.FetchType;
import javax.persistence.GeneratedValue;
import javax.persistence.Id;
import javax.persistence.JoinColumn;
import javax.persistence.ManyToOne;
import javax.persistence.OneToMany;
import javax.persistence.OrderBy;
import javax.persistence.Table;
import javax.persistence.Transient;

import org.hibernate.validator.NotNull;

/**
 * SitStrada generated by hbm2java
 */
@Entity
@Table(name = "SitStrada", catalog = "commercio_calenzano")
public class SitStrada implements java.io.Serializable, Comparable<SitStrada> {

	private static final long serialVersionUID = 1715489863049323461L;
	private Integer idSitStrada;
	private TipologiaToponimo tipologiaToponimo;
	private String nome;
	private String codiceStrada;

	private List<SitCivico> civici = new ArrayList<SitCivico>(0);

	public SitStrada() {
	}

	public SitStrada(Integer idSitStrada, TipologiaToponimo tipologiaToponimo,
			String nome, String codiceStrada) {
		this.idSitStrada = idSitStrada;
		this.tipologiaToponimo = tipologiaToponimo;
		this.nome = nome;
		this.codiceStrada = codiceStrada;
	}

	public SitStrada(TipologiaToponimo tipologiaToponimo, String nome,
			String codiceStrada) {
		this.tipologiaToponimo = tipologiaToponimo;
		this.nome = nome;
		this.codiceStrada = codiceStrada;
	}

	public int compareTo(SitStrada o) {
		return this.getIdSitStrada().compareTo(o.getIdSitStrada());
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}
		if (obj == null) {
			return false;
		}
		if (!(obj instanceof SitStrada)) {
			return false;
		}
		SitStrada other = (SitStrada) obj;
		if (this.getIdSitStrada() == null) {
			if (other.getIdSitStrada() != null) {
				return false;
			}
		} else if (!this.getIdSitStrada().equals(other.getIdSitStrada())) {
			return false;
		}
		return true;
	}

	@OneToMany(mappedBy = "sitStrada")
	@OrderBy("codice")
	public List<SitCivico> getCivici() {
		return this.civici;
	}

	@Transient
	public List<String> getCiviciString() {
		List<String> res = new ArrayList<String>();
		for (SitCivico sc : this.getCivici()) {
			res
					.add(sc.getNumero()
							+ (sc.getEsponente() != null ? " "
									+ sc.getEsponente() : ""));
		}

		return res;
	}

	@Column(name = "codice", nullable = false)
	@NotNull
	public String getCodiceStrada() {
		return this.codiceStrada;
	}

	@Id
	@GeneratedValue(strategy = IDENTITY)
	@Column(name = "IDSitStrada", unique = true, nullable = false)
	public Integer getIdSitStrada() {
		return this.idSitStrada;
	}

	@Column(name = "nome", nullable = false)
	@NotNull
	public String getNome() {
		return this.nome;
	}

	@ManyToOne(fetch = FetchType.LAZY)
	@JoinColumn(name = "idTipologiaToponimo", nullable = false)
	@NotNull
	public TipologiaToponimo getTipologiaToponimo() {
		return this.tipologiaToponimo;
	}

	@Override
	public int hashCode() {
		final int prime = 31;
		int result = 1;
		result = prime
				* result
				+ ((this.idSitStrada == null) ? 0 : this.idSitStrada.hashCode());
		return result;
	}

	public void setCivici(List<SitCivico> civici) {
		this.civici = civici;
	}

	public void setCodiceStrada(String codiceStrada) {
		this.codiceStrada = codiceStrada;
	}

	public void setIdSitStrada(Integer idSitStrada) {
		this.idSitStrada = idSitStrada;
	}

	public void setNome(String nome) {
		this.nome = nome;
	}

	public void setTipologiaToponimo(TipologiaToponimo tipologiaToponimo) {
		this.tipologiaToponimo = tipologiaToponimo;
	}

}
